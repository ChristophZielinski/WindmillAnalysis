================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-06T20:50:27.841Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
__pycache__/config.cpython-310.pyc
app/__init__.py
app/cygert_analysis.py
app/matlab_integration.py
app/routes.py
app/utils.py
app/video_analysis.py
config.py
requirements.txt
run.py
templates/cygert_analysis.html
templates/index.html
templates/MIT_analysis.html
templates/upload.html
vidmag/.git/config
vidmag/.git/description
vidmag/.git/HEAD
vidmag/.git/hooks/applypatch-msg.sample
vidmag/.git/hooks/commit-msg.sample
vidmag/.git/hooks/fsmonitor-watchman.sample
vidmag/.git/hooks/post-update.sample
vidmag/.git/hooks/pre-applypatch.sample
vidmag/.git/hooks/pre-commit.sample
vidmag/.git/hooks/pre-merge-commit.sample
vidmag/.git/hooks/pre-push.sample
vidmag/.git/hooks/pre-rebase.sample
vidmag/.git/hooks/pre-receive.sample
vidmag/.git/hooks/prepare-commit-msg.sample
vidmag/.git/hooks/push-to-checkout.sample
vidmag/.git/hooks/update.sample
vidmag/.git/index
vidmag/.git/info/exclude
vidmag/.git/logs/HEAD
vidmag/.git/logs/refs/heads/master
vidmag/.git/logs/refs/remotes/origin/HEAD
vidmag/.git/objects/pack/pack-e3befa2068cfcd7314593e4f9dfd08b23c8550e3.idx
vidmag/.git/objects/pack/pack-e3befa2068cfcd7314593e4f9dfd08b23c8550e3.pack
vidmag/.git/packed-refs
vidmag/.git/refs/heads/master
vidmag/.git/refs/remotes/origin/HEAD
vidmag/.gitignore
vidmag/ChangeLog.txt
vidmag/download_data.sh
vidmag/Filters/AmplitudeWeightedBlur.m
vidmag/Filters/differenceOfButterworths.m
vidmag/Filters/differenceOfIIR.m
vidmag/Filters/FIRWindowBP.m
vidmag/Linear/amplify_spatial_Gdown_temporal_ideal.m
vidmag/Linear/amplify_spatial_lpyr_temporal_butter.m
vidmag/Linear/amplify_spatial_lpyr_temporal_ideal.m
vidmag/Linear/amplify_spatial_lpyr_temporal_iir.m
vidmag/Linear/blurDnClr.m
vidmag/Linear/blurUpClr.m
vidmag/Linear/build_GDown_stack.m
vidmag/Linear/build_Lpyr_stack.m
vidmag/Linear/ideal_bandpassing.m
vidmag/make.m
vidmag/PhaseBased/motionAttenuateFixedPhase.m
vidmag/PhaseBased/motionAttenuateLowpassPhase.m
vidmag/PhaseBased/motionAttenuateMedianPhase.m
vidmag/PhaseBased/phaseAmplify.m
vidmag/PhaseBased/phaseAmplifyLargeMotions.m
vidmag/PhaseBased/phaseAmplifySimple.m
vidmag/reproduceResultsSiggraph13.m
vidmag/setPath.m

================================================================
Repository Files
================================================================

================
File: config.py
================
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    # Uzyskaj ścieżkę do głównego katalogu projektu (windmill-analysis)
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))
    # Ustaw UPLOAD_FOLDER jako podkatalog 'uploads' w głównym katalogu projektu
    UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
    RESULTS_FOLDER = os.path.join(BASE_DIR, 'results')
    ALLOWED_EXTENSIONS = {'mp4', 'avi', 'mov'}

    VIDEO_ANALYSIS = {
        'EDGE_THRESHOLD_LOW': 50,
        'EDGE_THRESHOLD_HIGH': 150,
        'HOUGH_THRESHOLD': 200,
        'ROTATION_ANGLE_THRESHOLD': 120
    }

================
File: requirements.txt
================
flask
opencv-python
numpy
scipy
matlabengine
opencv-contrib-python
Pillow
matplotlib
pyinstaller

================
File: run.py
================
from app import app

if __name__ == '__main__':
    app.run(debug=True)

================
File: app/cygert_analysis.py
================
import cv2
import numpy as np
from INUSER.Model import Model
from INUSER.View import View

class CygertAnalysis:
    def __init__(self, video_path):
        self.model = Model(video_path, isCamera=False)
        self.view = View()
        self.model.restart()  # Inicjalizacja turbiny

    def get_processed_frame(self):
        ret, frame = self.model.update()
        if ret:
            frame = self.view.draw(frame, self.model)
            _, buffer = cv2.imencode('.jpg', frame)
            return buffer.tobytes()
        return None

    def get_turbine_data(self):
        turbine_data = []
        for turbine in self.model.turbines:
            freq = turbine.get_freq()
            if freq is not None:
                turbine_data.append({'frequency': freq})
        return turbine_data

================
File: app/matlab_integration.py
================
import matlab.engine
import os

def analyze_turbine_vibrations(video_path, alpha=100.0, fl=0.2, fh=0.25, fs=24.0):
    eng = matlab.engine.start_matlab()
    
    try:
        # Ustaw ścieżkę do folderu z kodem MATLAB
        matlab_code_path = os.path.abspath('vidmag')
        eng.addpath(eng.genpath(matlab_code_path))
        
        # Ustaw katalog roboczy na folder z kodem MATLAB
        eng.cd(matlab_code_path)
        
        # Wywołaj funkcję setPath z kodu MATLAB
        eng.setPath(nargout=0)
        
        # Przygotuj argumenty dla funkcji phaseAmplify
        outDir = os.path.abspath('results')  # Zmieniono ścieżkę wyjściową
        os.makedirs(outDir, exist_ok=True)  # Upewnij się, że folder istnieje
        # Parametry zgodne z reproduceResultsSiggraph13.m
        sigma = 5.0
        temporalFilter = eng.eval('@FIRWindowBP')
        pyrType = 'halfOctave'
        scaleVideo = 2.0/3.0 if scaleAndClipLargeVideos else 1.0

        # Upewnij się, że wszystkie numeryczne parametry są float
        alpha = float(alpha)
        fl = float(fl)
        fh = float(fh)
        fs = float(fs)

        # Wywołaj funkcję phaseAmplify
        result = eng.phaseAmplify(video_path, alpha, fl, fh, fs, outDir, 
                                  'sigma', sigma,
                                  'pyrType', pyrType,
                                  'temporalFilter', temporalFilter,
                                  'scaleVideo', scaleVideo,
                                  nargout=1)
        # Znajdź wygenerowany plik wideo
        output_video = None
        print(os.path.basename(video_path))
        for file in os.listdir(outDir):
            if file.endswith('.mp4') and file.startswith(result):
                output_video = os.path.join(outDir, file)
                break
        if output_video is None:
            raise Exception("Output video file not found")
        # Konwertuj wynik MATLAB na słownik Pythona
        python_result = {
            "output_file": output_video,
            "magnification": alpha,
            "low_freq": fl,
            "high_freq": fh,
            "sampling_rate": fs,
            "input_video": video_path,
            "output_dir": outDir,
            "sigma": sigma,
            "pyr_type": pyrType,
            "scale_video": scaleVideo
        }
        return python_result
    except Exception as e:
        return {"error": str(e)}
    finally:
        eng.quit()

# Globalna zmienna kontrolująca skalowanie wideo
scaleAndClipLargeVideos = True

def set_scale_and_clip_large_videos(value):
    global scaleAndClipLargeVideos
    scaleAndClipLargeVideos = value

================
File: app/routes.py
================
from flask import request, jsonify, render_template, send_file, Response
from app import app
from app.utils import save_file
from app.matlab_integration import analyze_turbine_vibrations
#from INUSER.Model import Model
#from INUSER.View import View
import cv2
import numpy as np
import os
import logging
import io

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
# Konfiguracja logowania
logging.basicConfig(level=logging.DEBUG)
cygert_analysis = None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/mit_analysis')
def mit_analysis():
    return render_template('mit_analysis.html')

@app.route('/cygert_analysis')
def cygert_analysis_page():
    return render_template('cygert_analysis.html')

@app.route('/list_uploads')
def list_uploads():
    upload_folder = app.config['UPLOAD_FOLDER']
    files = [f for f in os.listdir(upload_folder) if os.path.isfile(os.path.join(upload_folder, f))]
    return jsonify({'files': files})

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    upload_folder = app.config['UPLOAD_FOLDER']
    logging.info(f"Upload folder path: {upload_folder}")
    os.makedirs(upload_folder, exist_ok=True)
    file_path = save_file(file)
    
    if file_path:
        logging.info(f"File uploaded successfully to: {file_path}")
        return jsonify({'message': 'File uploaded successfully', 'path': os.path.basename(file_path)}), 200
    logging.error("File upload failed")
    return jsonify({'error': 'File upload failed'}), 400

@app.route('/analyze', methods=['POST'])
def analyze_video():
    logging.info(f"Current working directory: {os.getcwd()}")

    if 'file' not in request.form:
        logging.error("No file specified")
        return jsonify({'error': 'No file specified'}), 400
    
    file_name = request.form['file']
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file_name)
    
    if not os.path.exists(file_path):
        logging.error(f"File not found: {file_path}")
        return jsonify({'error': 'File not found'}), 400
    
    alpha = float(request.form.get('alpha', 50))
    fl = float(request.form.get('fl', 0.2))
    fh = float(request.form.get('fh', 0.25))
    fs = float(request.form.get('fs', 24))

    logging.debug(f"Analysis parameters: alpha={alpha}, fl={fl}, fh={fh}, fs={fs}")
    logging.info(f"Starting analysis for file: {file_path}")

    result = analyze_turbine_vibrations(file_path, alpha, fl, fh, fs)
    if 'error' in result:
        logging.error(f"Analysis failed: {result['error']}")
        return jsonify(result), 400
    
    logging.info("Analysis completed successfully")
    
    output_file = os.path.basename(result['output_file'])
    output_file_path = os.path.join(app.config['RESULTS_FOLDER'], output_file)

    if os.path.exists(output_file_path):
        result['output_file'] = f'/results/{output_file}'
    else:
        return jsonify({'error': 'Output file not found'}), 400
    
    return jsonify(result), 200

@app.route('/results/<path:filename>')
def serve_video(filename):
    video_path = os.path.join(app.config['RESULTS_FOLDER'], filename)
    logging.info(f"Attempting to serve video from: {video_path}")
    if not os.path.exists(video_path):
        logging.error(f"Video file not found: {video_path}")
        return jsonify({'error': f'Video file not found: {video_path}'}), 404
    return send_file(video_path)

inuser_model = None
inuser_view = None

@app.route('/cygert_analysis')
def cygert_analysis():
    return render_template('cygert_analysis.html')

@app.route('/init_model')
def init_model():
    global inuser_model, inuser_view
    try:
        video_path = os.path.join(app.config['UPLOAD_FOLDER'], 'Farma1.MOV')
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"Plik wideo nie istnieje: {video_path}")
        inuser_model = Model(video_path, isCamera=False)
        inuser_view = View()
        logging.info("Model i widok zainicjalizowane pomyślnie")
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Błąd podczas inicjalizacji modelu: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/video_feed')
def video_feed():
    def generate():
        global inuser_model, inuser_view
        if inuser_model is None or inuser_view is None:
            logging.error("Model lub widok nie jest zainicjalizowany")
            return

        while True:
            try:
                ret, frame = inuser_model.update()
                if not ret:
                    logging.warning("Nie można odczytać klatki z wideo")
                    break
                
                frame = inuser_view.draw(frame, inuser_model)
                _, buffer = cv2.imencode('.jpg', frame)
                frame = buffer.tobytes()
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
            except Exception as e:
                logging.error(f"Błąd podczas generowania klatki: {str(e)}")
                break

    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/background_removed_feed')
def background_removed_feed():
    def generate():
        global inuser_model
        if inuser_model is None:
            logging.error("Model nie jest zainicjalizowany")
            return

        while True:
            try:
                bg_removed = inuser_model.get_background_removed()
                _, buffer = cv2.imencode('.jpg', bg_removed)
                frame = buffer.tobytes()
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
            except Exception as e:
                logging.error(f"Błąd podczas generowania klatki z usuniętym tłem: {str(e)}")
                break

    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/turbine_data')
def turbine_data():
    global inuser_model
    if inuser_model:
        try:
            data = inuser_model.get_turbine_data()
            return jsonify(data)
        except Exception as e:
            logging.error(f"Błąd podczas pobierania danych turbiny: {str(e)}")
            return jsonify({'error': str(e)}), 500
    return jsonify([])

@app.route('/get_fps')
def get_fps():
    global inuser_model
    if inuser_model:
        return jsonify({'fps': inuser_model.get_fps()})
    return jsonify({'fps': 0})

@app.route('/remove_turbine', methods=['POST'])
def remove_turbine():
    global inuser_model
    if inuser_model:
        inuser_model.remove_turbine()
        return jsonify({'success': True})
    return jsonify({'error': 'Model nie jest zainicjalizowany'}), 400

@app.route('/add_turbine', methods=['POST'])
def add_turbine():
    global inuser_model
    if inuser_model:
        inuser_model.add_turbine()
        return jsonify({'success': True})
    return jsonify({'error': 'Model nie jest zainicjalizowany'}), 400

@app.route('/find_turbines', methods=['POST'])
def find_turbines():
    global inuser_model
    if inuser_model:
        inuser_model.find_turbines()
        return jsonify({'success': True})
    return jsonify({'error': 'Model nie jest zainicjalizowany'}), 400

@app.route('/start_analysis', methods=['POST'])
def start_analysis():
    global inuser_model
    if inuser_model:
        inuser_model.start_analysis()
        return jsonify({'success': True})
    return jsonify({'error': 'Model nie jest zainicjalizowany'}), 400

@app.route('/stop_analysis', methods=['POST'])
def stop_analysis():
    global inuser_model
    if inuser_model:
        inuser_model.stop_analysis()
        return jsonify({'success': True})
    return jsonify({'error': 'Model nie jest zainicjalizowany'}), 400

================
File: app/utils.py
================
import os
from werkzeug.utils import secure_filename
from app import app

ALLOWED_EXTENSIONS = {'mp4', 'avi', 'mov'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def save_file(file, target_folder=None):
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        if target_folder is None:
            target_folder = app.config['UPLOAD_FOLDER']
        file_path = os.path.join(target_folder, filename)
        file.save(file_path)
        return file_path
    return None

def validate_video(file_path):
    # Sprawdź, czy plik istnieje
    if not os.path.exists(file_path):
        return False, "File does not exist"
    
    # Sprawdź, czy plik można otworzyć jako wideo
    import cv2
    cap = cv2.VideoCapture(file_path)
    if not cap.isOpened():
        return False, "Cannot open video file"
    
    # Sprawdź długość wideo
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    if frame_count < 30:  # Przykładowy próg
        return False, "Video is too short"
    
    cap.release()
    return True, "Video is valid"

================
File: app/video_analysis.py
================
import cv2
import numpy as np

def detect_turbine_blades(video_path):
    cap = cv2.VideoCapture(video_path)
    rotations = 0
    prev_angle = None
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        # Konwertuj do skali szarości
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Wykryj krawędzie
        edges = cv2.Canny(gray, 50, 150)
        
        # Wykryj linie
        lines = cv2.HoughLines(edges, 1, np.pi/180, 200)
        
        if lines is not None:
            for rho, theta in lines[0]:
                angle = theta * 180 / np.pi
                
                if prev_angle is not None:
                    # Sprawdź, czy łopata przeszła pełny obrót
                    if abs(angle - prev_angle) > 120:  # Przykładowy próg
                        rotations += 1
                
                prev_angle = angle
    
    cap.release()
    return rotations

def count_rotations(video_path):
    is_valid, message = validate_video(video_path)
    if not is_valid:
        return {"error": message}
    
    rotations = detect_turbine_blades(video_path)
    return {"rotations": rotations}

================
File: app/__init__.py
================
from flask import Flask
from config import Config
import os

app = Flask(__name__, template_folder='../templates', static_folder='../static')
app.config.from_object(Config)

from app import routes, models

================
File: templates/cygert_analysis.html
================
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analiza Turbiny Wiatrowej - INUSER</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        #video-container {
            position: relative;
            margin-bottom: 20px;
        }
        #processed-video {
            width: 100%;
            border: 1px solid #ddd;
        }
        #fps-counter {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 5px;
            border-radius: 3px;
        }
        #background-removed {
            width: 100%;
            height: 150px;
            border: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .button-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
        #turbine-info {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        #error-message {
            color: red;
            font-weight: bold;
            margin-top: 10px;
        }
        #loading-message {
            color: blue;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Analiza Wideo Turbiny Wiatrowej - INUSER</h1>
        
        <div id="loading-message">Inicjalizacja modelu...</div>
        <div id="error-message" style="display: none;"></div>
        
        <div id="video-container" style="display: none;">
            <img id="processed-video" alt="Przetwarzane wideo">
            <div id="fps-counter">FPS: <span id="fps-value">0</span></div>
        </div>

        <img id="background-removed" alt="Usunięte tło" style="display: none;">

        <div class="button-container">
            <button id="remove-turbine">Remove turbine</button>
            <button id="add-turbine">Add turbine</button>
            <button id="download-data">Download data</button>
            <button id="find-turbines">Find turbines</button>
            <button id="start">Start</button>
        </div>

        <div id="turbine-info">
            <h2>Informacje o turbinach</h2>
            <div id="turbine-data"></div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            function showError(message) {
                $('#error-message').text(message).show();
                $('#loading-message').hide();
            }

            function initializeModel() {
                $.get('/init_model')
                    .done(function(response) {
                        if (response.success) {
                            $('#loading-message').hide();
                            $('#video-container').show();
                            $('#background-removed').show();
                            $('#processed-video').attr('src', "{{ url_for('video_feed') }}");
                            $('#background-removed').attr('src', "{{ url_for('background_removed_feed') }}");
                        } else {
                            showError('Błąd podczas inicjalizacji modelu');
                        }
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        showError('Błąd podczas inicjalizacji modelu: ' + errorThrown);
                    });
            }

            initializeModel();

            function updateFPS() {
                $.get('/get_fps')
                    .done(function(data) {
                        $('#fps-value').text(data.fps.toFixed(2));
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Błąd podczas pobierania FPS:', errorThrown);
                    });
            }

            $('#remove-turbine').click(function() {
                $.post('/remove_turbine')
                    .done(function(response) {
                        console.log('Turbina usunięta:', response);
                        updateTurbineData();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Błąd podczas usuwania turbiny:', errorThrown);
                    });
            });

            $('#add-turbine').click(function() {
                $.post('/add_turbine')
                    .done(function(response) {
                        console.log('Turbina dodana:', response);
                        updateTurbineData();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Błąd podczas dodawania turbiny:', errorThrown);
                    });
            });

            $('#download-data').click(function() {
                window.location.href = '/download_data';
            });

            $('#find-turbines').click(function() {
                $.post('/find_turbines')
                    .done(function(response) {
                        console.log('Turbiny znalezione:', response);
                        updateTurbineData();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Błąd podczas wyszukiwania turbin:', errorThrown);
                    });
            });

            $('#start').click(function() {
                if (!isAnalysisStarted) {
                    $.post('/start_analysis')
                        .done(function(response) {
                            console.log('Analiza rozpoczęta:', response);
                            isAnalysisStarted = true;
                            $('#start').text('Stop');
                        })
                        .fail(function(jqXHR, textStatus, errorThrown) {
                            console.error('Błąd podczas rozpoczynania analizy:', errorThrown);
                        });
                } else {
                    $.post('/stop_analysis')
                        .done(function(response) {
                            console.log('Analiza zatrzymana:', response);
                            isAnalysisStarted = false;
                            $('#start').text('Start');
                        })
                        .fail(function(jqXHR, textStatus, errorThrown) {
                            console.error('Błąd podczas zatrzymywania analizy:', errorThrown);
                        });
                }
            });

            setInterval(updateTurbineData, 1000);
            setInterval(updateFPS, 1000);
        });
    </script>
</body>
</html>

================
File: templates/index.html
================
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analiza Turbiny Wiatrowej</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1, h2 {
            color: #333;
        }
        form, .file-selection {
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="file"], select {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #result {
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Analiza Wideo Turbiny Wiatrowej</h1>
    
    <form id="upload-form">
        <h2>Przesłanie nowego pliku</h2>
        <input type="file" id="file" name="file" accept="video/*" required>
        <button type="submit">Prześlij plik</button>
    </form>

    <div class="file-selection">
        <h2>Wybór pliku z biblioteki</h2>
        <select id="file-select">
            <option value="">Wybierz plik...</option>
            <!-- Opcje będą dodawane dynamicznie przez JavaScript -->
        </select>
    </div>

    <button id="mit-method" disabled>MIT metoda wzmocnienia ruchu pikseli</button>
    <button id="cygert-method" disabled>Liczenie obrotów - dr Cygert</button>

    <div id="result"></div>

    <script>
        $(document).ready(function() {
            let selectedFile = null;

            // Pobierz listę plików z folderu uploads
            $.get('/list_uploads', function(data) {
                data.files.forEach(function(file) {
                    $('#file-select').append($('<option>', {
                        value: file,
                        text: file
                    }));
                });
            });

            $('#upload-form').submit(function(e) {
                e.preventDefault();
                var formData = new FormData(this);
                
                $.ajax({
                    url: '/upload',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        $('#result').text('Plik przesłany pomyślnie: ' + response.path);
                        selectedFile = response.path;
                        updateButtonState();
                    },
                    error: function(xhr, status, error) {
                        $('#result').text('Błąd: ' + xhr.responseJSON.error);
                    }
                });
            });

            $('#file-select').change(function() {
                selectedFile = $(this).val();
                updateButtonState();
            });

            function updateButtonState() {
                if (selectedFile) {
                    $('#mit-method').prop('disabled', false);
                    $('#cygert-method').prop('disabled', false);
                } else {
                    $('#mit-method').prop('disabled', true);
                    $('#cygert-method').prop('disabled', true);
                }
            }

            $('#mit-method').click(function() {
                if (selectedFile) {
                    window.location.href = '/mit_analysis?file=' + encodeURIComponent(selectedFile);
                }
            });

            $('#cygert-method').click(function() {
                if (selectedFile) {
                    window.location.href = '/cygert_analysis?file=' + encodeURIComponent(selectedFile);
                }
            });
        });
    </script>
</body>
</html>

================
File: templates/MIT_analysis.html
================
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MIT Analiza Turbiny Wiatrowej</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        h1, h2 {
            color: #333;
        }
        form, .file-selection {
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="file"], input[type="number"], select {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #result {
            margin-top: 20px;
            font-weight: bold;
        }
        #output-video {
            max-width: 100%;
            margin-top: 20px;
        }
        .return-button {
            background-color: #f0f0f0;
            color: #333;
            border: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .return-button:hover {
            background-color: #e0e0e0;
        }
    </style>
</head>
<body>
    <button class="return-button" onclick="window.location.href='/'">Powrót do strony głównej</button>

    <h1>MIT Analiza Wideo Turbiny Wiatrowej</h1>
    
    <form id="analysis-form">
        <h2>Parametry analizy</h2>
        <label for="file">Wybrane wideo:</label>
        <input type="text" id="selected-file" readonly>
        
        <label for="alpha">Współczynnik wzmocnienia (Alpha):</label>
        <input type="number" id="alpha" name="alpha" value="50" step="1" required>
        
        <label for="fl">Dolna częstotliwość graniczna (Hz):</label>
        <input type="number" id="fl" name="fl" value="0.2" step="0.01" required>
        
        <label for="fh">Górna częstotliwość graniczna (Hz):</label>
        <input type="number" id="fh" name="fh" value="0.25" step="0.01" required>
        
        <label for="fs">Częstotliwość próbkowania (Hz):</label>
        <input type="number" id="fs" name="fs" value="24" step="1" required>
        
        <button type="submit">Analizuj</button>
    </form>

    <div class="file-selection">
        <h2>Zmień wideo</h2>
        <select id="file-select">
            <option value="">Wybierz plik...</option>
            <!-- Opcje będą dodawane dynamicznie przez JavaScript -->
        </select>
    </div>

    <div id="result"></div>
    <video id="output-video" controls style="display: none;"></video>

    <script>
        $(document).ready(function() {
            let selectedFile = new URLSearchParams(window.location.search).get('file');
            
            $('#selected-file').val(selectedFile);

            // Pobierz listę plików z folderu uploads
            $.get('/list_uploads', function(data) {
                data.files.forEach(function(file) {
                    $('#file-select').append($('<option>', {
                        value: file,
                        text: file
                    }));
                });
                $('#file-select').val(selectedFile);
            });

            $('#file-select').change(function() {
                selectedFile = $(this).val();
                $('#selected-file').val(selectedFile);
            });

            $('#analysis-form').submit(function(e) {
                e.preventDefault();
                var formData = new FormData(this);
                formData.append('file', selectedFile);
                
                $.ajax({
                    url: '/analyze',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        $('#result').text('Analiza zakończona pomyślnie!');
                        if (response.output_file) {
                            $('#output-video').attr('src', response.output_file).show();
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#result').text('Błąd: ' + (xhr.responseJSON ? xhr.responseJSON.error : error));
                    }
                });
            });
        });
    </script>
</body>
</html>

================
File: templates/upload.html
================
<!DOCTYPE html>
<html>
<body>
    <h2>Upload Video for Analysis</h2>
    <form action="/analyze" method="post" enctype="multipart/form-data">
        <input type="file" name="file">
        <input type="submit" value="Analyze">
    </form>
</body>
</html>

================
File: vidmag/.gitignore
================
.DS_Store
*.o
*.mex
videos.zip
data/

================
File: vidmag/ChangeLog.txt
================
2013-10-21: Version 2.0, Neal Wadhwa
* Added phase-based method

2013-03-02: Version 1.1, Michael Rubinstein
* Added make.m
* Updated README

2012-09-16: Version 1.0, Michael Rubinstein
* Initial release (linear method)

================
File: vidmag/download_data.sh
================
#!/bin/sh

URL=http://people.csail.mit.edu/nwadhwa/phase-video/video/Source%20and%20Result%20Videos.zip

if which -s curl; then
  curl -o videos.zip "$URL"
else
  wget -O videos.zip "$URL"
fi

unzip -j videos.zip -x 'Source and Result Videos/results/*' -d data
rm -f videos.zip

================
File: vidmag/make.m
================
% Build matlabPyrTools
fprintf('Building matlabPyrTools...\n');
run(fullfile('matlabPyrTools', 'MEX', 'compilePyrTools.m'));

================
File: vidmag/reproduceResultsSiggraph13.m
================
clear;

dataDir = './data';

resultsDir = 'ResultsSIGGRAPH2013/';
mkdir(resultsDir);
defaultPyrType = 'halfOctave'; % Half octave pyramid is default as discussed in paper
scaleAndClipLargeVideos = true; % With this enabled, approximately 4GB of memory is used

% Uncomment to use octave bandwidth pyramid: speeds up processing,
% but will produce slightly different results
%defaultPyrType = 'octave'; 

% Uncomment to process full video sequences (uses about 16GB of memory)
%scaleAndClipLargeVideos = false;

%% Amplify parameters and call of function
inFile = fullfile(dataDir, '1.mp4');
samplingRate = 24; % Hz
loCutoff = 0.2;    % Hz
hiCutoff = 0.25;    % Hz
alpha = 100;    
sigma = 5;         % Pixels
temporalFilter = @FIRWindowBP; 
pyrType = defaultPyrType;
if (scaleAndClipLargeVideos)
    phaseAmplify(inFile, alpha, loCutoff, hiCutoff, samplingRate, resultsDir,'sigma', sigma,'pyrType', pyrType,'temporalFilter', temporalFilter,'scaleVideo', 2/3);
else
    phaseAmplify(inFile, alpha, loCutoff, hiCutoff, samplingRate, resultsDir,'sigma', sigma,'pyrType', pyrType,'temporalFilter', temporalFilter, 'scaleVideo', 1);
end  
% The sequence is very large. To save on CPU time, we set
% pyramid type to 'octave'. If you have the resources or time, feel free to change it
% to 'halfOctave'

================
File: vidmag/setPath.m
================
% Adds directories to MATLAB path

% Paths for the linear method
addpath(fullfile(pwd, 'Linear'));
addpath(fullfile(pwd, 'Util'));
addpath(fullfile(pwd, 'matlabPyrTools'));
addpath(fullfile(pwd, 'matlabPyrTools', 'MEX'));

% Paths for the phase-based method
addpath(fullfile(pwd, 'PhaseBased'));
addpath(fullfile(pwd, 'pyrToolsExt'));
addpath(fullfile(pwd, 'Filters'));

================
File: vidmag/.git/config
================
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/rgov/vidmag
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
	vscode-merge-base = origin/master

================
File: vidmag/.git/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: vidmag/.git/HEAD
================
ref: refs/heads/master

================
File: vidmag/.git/packed-refs
================
# pack-refs with: peeled fully-peeled sorted 
5e590cfd3b87035dc1071802117579b6c7d39f1a refs/remotes/origin/master

================
File: vidmag/Filters/AmplitudeWeightedBlur.m
================
function out = AmplitudeWeightedBlur( in, weight, sigma )
%AMPLITUDEWEIGHTEDBLUR Summary of this function goes here
%   Detailed explanation goes here

    if (sigma~=0)
        kernel = fspecial('gaussian', ceil(4*sigma), sigma);
        sz = size(kernel);
        weight = weight+eps;
        out = imfilter(in.*weight, kernel,'circular');
        weightMat = imfilter(weight,kernel,'circular');
        out = out./weightMat;
    else
        out = in;
    end
end

================
File: vidmag/Filters/differenceOfButterworths.m
================
function delta = differenceOfButterworths( delta, fl, fh )   
    timeDimension = 3;
    
    [low_a, low_b] = butter(1, fl, 'low');
    [high_a, high_b] = butter(1, fh, 'low');
    
    len = size(delta,timeDimension);
    
    lowpass1 = delta(:,:,1);
    lowpass2 = lowpass1;
    prev = lowpass1;    
    delta(:,:,1) = 0;   
    for i = 2:len
        lowpass1 = (-high_b(2).*lowpass1 + high_a(1).*delta(:,:,i)+high_a(2).*prev)./high_b(1);
        lowpass2 = (-low_b(2).*lowpass2 + low_a(1).*delta(:,:,i)+low_a(2).*prev)./low_b(1);
        prev = delta(:,:,i);
        delta(:,:,i) = lowpass1-lowpass2;        
    end

end

================
File: vidmag/Filters/differenceOfIIR.m
================
function delta = differenceOfIIR(delta, rl, rh)
    timeDimension = 3;
    len = size(delta, timeDimension);
    lowpass1 = delta(:,:,1);
    lowpass2 = lowpass1;    
    delta(:,:,1) = 0;
    for i = 2:len       
        lowpass1 = (1-rh)*lowpass1 + rh*delta(:,:,i);
        lowpass2 = (1-rl)*lowpass2 + rl*delta(:,:,i);
        delta(:,:,i) = lowpass1-lowpass2;   
    end
end

================
File: vidmag/Filters/FIRWindowBP.m
================
function delta = FIRWindowBP(delta,  fl, fh )
    timeDimension = 3;
    len = size(delta,3);
    fl = fl*2; %Scale to be fraction of Nyquist frequency
    fh = fh*2;
    B = fir1(len, [fl, fh]);
    
    M = size(delta,1);
    batches = 20;    
    batchSize = ceil(M/batches);
    B = B(1:len);
    temp = fft(ifftshift(B));
    transferFunction(1,1,:) = temp;
    for k = 1:batches
        idx = 1+batchSize*(k-1):min(k*batchSize, M);
        freqDom = fft(delta(idx,:,:), [], timeDimension);
        freqDom = freqDom.*repmat(transferFunction,[size(freqDom,1), size(freqDom, 2)]);
        delta(idx,:,:) = real(single(ifft(freqDom,[],timeDimension)));
    end            
end

================
File: vidmag/Linear/amplify_spatial_Gdown_temporal_ideal.m
================
% amplify_spatial_Gdown_temporal_ideal(vidFile, outDir, alpha, 
%                                      level, fl, fh, samplingRate, 
%                                      chromAttenuation)
%
% Spatial Filtering: Gaussian blur and down sample
% Temporal Filtering: Ideal bandpass
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function amplify_spatial_Gdown_temporal_ideal(vidFile,outDir,alpha,level, ...
                     fl,fh,samplingRate, chromAttenuation)
 

    [~,vidName] = fileparts(vidFile);

    outName = fullfile(outDir,[vidName '-ideal-from-' num2str(fl) ...
                           '-to-' num2str(fh) ...
                           '-alpha-' num2str(alpha) ...
                           '-level-' num2str(level) ...
                           '-chromAtn-' num2str(chromAttenuation) '.avi']);


    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    fr = vid.FrameRate;
    len = vid.NumberOfFrames;
    temp = struct('cdata', zeros(vidHeight, vidWidth, nChannels, 'uint8'), 'colormap', []);

    startIndex = 1;
    endIndex = len-10;

    vidOut = VideoWriter(outName);
    vidOut.FrameRate = fr;

    open(vidOut)


    % compute Gaussian blur stack
    disp('Spatial filtering...')
    Gdown_stack = build_GDown_stack(vidFile, startIndex, endIndex, level);
    disp('Finished')
    
    
    % Temporal filtering
    disp('Temporal filtering...')
    filtered_stack = ideal_bandpassing(Gdown_stack, 1, fl, fh, samplingRate);
    disp('Finished')
    
    %% amplify
    filtered_stack(:,:,:,1) = filtered_stack(:,:,:,1) .* alpha;
    filtered_stack(:,:,:,2) = filtered_stack(:,:,:,2) .* alpha .* chromAttenuation;
    filtered_stack(:,:,:,3) = filtered_stack(:,:,:,3) .* alpha .* chromAttenuation;



    %% Render on the input video
    disp('Rendering...')
    % output video
    k = 0;
    for i=startIndex:endIndex
        k = k+1
        temp.cdata = read(vid, i);
        [rgbframe,~] = frame2im(temp);
        rgbframe = im2double(rgbframe);
        frame = rgb2ntsc(rgbframe);

        filtered = squeeze(filtered_stack(k,:,:,:));

        filtered = imresize(filtered,[vidHeight vidWidth]);

        filtered = filtered+frame;

        frame = ntsc2rgb(filtered);

        frame(frame > 1) = 1;
        frame(frame < 0) = 0;


        writeVideo(vidOut,im2uint8(frame));
    end

    disp('Finished')
    close(vidOut);

end

================
File: vidmag/Linear/amplify_spatial_lpyr_temporal_butter.m
================
% amplify_spatial_lpyr_temporal_butter(vidFile, outDir, alpha, lambda_c, 
%                                      fl, fh, samplingRate, chromAttenuation)
% 
% Spatial Filtering: Laplacian pyramid
% Temporal Filtering: substraction of two butterworth lowpass filters
%                     with cutoff frequencies fh and fl
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function amplify_spatial_lpyr_temporal_butter(vidFile, outDir ...
    ,alpha, lambda_c, fl, fh ...
    ,samplingRate, chromAttenuation)
    
    [low_a, low_b] = butter(1, fl/samplingRate, 'low');
    [high_a, high_b] = butter(1, fh/samplingRate, 'low');

    [~,vidName] = fileparts(vidFile);

    outName = fullfile(outDir,[vidName '-butter-from-' num2str(fl) '-to-' ...
        num2str(fh) '-alpha-' num2str(alpha) '-lambda_c-' num2str(lambda_c) ...
        '-chromAtn-' num2str(chromAttenuation) '.avi']);

    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    fr = vid.FrameRate;
    len = vid.NumberOfFrames;
    temp = struct('cdata', ...
		  zeros(vidHeight, vidWidth, nChannels, 'uint8'), ...
		  'colormap', []);

    startIndex = 1;
    endIndex = len-10;

    vidOut = VideoWriter(outName);
    vidOut.FrameRate = fr;

    open(vidOut)

    % firstFrame
    temp.cdata = read(vid, startIndex);
    [rgbframe,~] = frame2im(temp);
    rgbframe = im2double(rgbframe);
    frame = rgb2ntsc(rgbframe);

    [pyr,pind] = buildLpyr(frame(:,:,1),'auto');
    pyr = repmat(pyr,[1 3]);
    [pyr(:,2),~] = buildLpyr(frame(:,:,2),'auto');
    [pyr(:,3),~] = buildLpyr(frame(:,:,3),'auto');
    lowpass1 = pyr;
    lowpass2 = pyr;
    pyr_prev = pyr;
    
    output = rgbframe;
    writeVideo(vidOut,im2uint8(output));

    nLevels = size(pind,1);

    for i=startIndex+1:endIndex
        
            progmeter(i-startIndex,endIndex - startIndex + 1);
        
            temp.cdata = read(vid, i);
            [rgbframe,~] = frame2im(temp);

            rgbframe = im2double(rgbframe);
            frame = rgb2ntsc(rgbframe);
            
            [pyr(:,1),~] = buildLpyr(frame(:,:,1),'auto');
            [pyr(:,2),~] = buildLpyr(frame(:,:,2),'auto');
            [pyr(:,3),~] = buildLpyr(frame(:,:,3),'auto');

            %% temporal filtering
            lowpass1 = (-high_b(2) .* lowpass1 + high_a(1).*pyr + ...
			high_a(2).*pyr_prev)./high_b(1);
            lowpass2 = (-low_b(2) .* lowpass2 + low_a(1).*pyr + ...
			low_a(2).*pyr_prev)./low_b(1);
          
            filtered = (lowpass1 - lowpass2);
            
            pyr_prev = pyr;     
            
            %% amplify each spatial frequency bands according to Figure 6 of our paper
            ind = size(pyr,1);

            delta = lambda_c/8/(1+alpha);
            
            % the factor to boost alpha above the bound we have in the
            % paper. (for better visualization)
            exaggeration_factor = 2;

            % compute the representative wavelength lambda for the lowest spatial 
            % freqency band of Laplacian pyramid

            lambda = (vidHeight^2 + vidWidth^2).^0.5/3; % 3 is experimental constant

            for l = nLevels:-1:1
              indices = ind-prod(pind(l,:))+1:ind;
              
              % compute modified alpha for this level
              currAlpha = lambda/delta/8 - 1;
              currAlpha = currAlpha*exaggeration_factor;
              
              if (l == nLevels || l == 1) % ignore the highest and lowest frequency band
                  filtered(indices,:) = 0;
              elseif (currAlpha > alpha)  % representative lambda exceeds lambda_c
                  filtered(indices,:) = alpha*filtered(indices,:);
              else
                  filtered(indices,:) = currAlpha*filtered(indices,:);
              end

              ind = ind - prod(pind(l,:));
              % go one level down on pyramid, 
              % representative lambda will reduce by factor of 2
              lambda = lambda/2; 
            end
            
            
            %% Render on the input video
            output = zeros(size(frame));
            
            output(:,:,1) = reconLpyr(filtered(:,1),pind);
            output(:,:,2) = reconLpyr(filtered(:,2),pind);
            output(:,:,3) = reconLpyr(filtered(:,3),pind);

            output(:,:,2) = output(:,:,2)*chromAttenuation; 
            output(:,:,3) = output(:,:,3)*chromAttenuation;

            output = frame + output;
            
            output = ntsc2rgb(output); 
%             filtered = rgbframe + filtered.*mask;

            output(output > 1) = 1;
            output(output < 0) = 0;

            writeVideo(vidOut,im2uint8(output));
                  
    end
    close(vidOut);
end

================
File: vidmag/Linear/amplify_spatial_lpyr_temporal_ideal.m
================
% amplify_spatial_lpyr_temporal_ideal(vidFile, outDir, alpha, lambda_c,
%                                     wl, wh, samplingRate, chromAttenuation)
% 
% Spatial Filtering: Laplacian pyramid
% Temporal Filtering: Ideal bandpass
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function amplify_spatial_lpyr_temporal_ideal(vidFile, outDir ...
    ,alpha, lambda_c, fl, fh ...
    ,samplingRate, chromAttenuation)
    

    [~,vidName] = fileparts(vidFile);

    outName = fullfile(outDir,[vidName '-ideal-from-' num2str(fl) ...
                       '-to-' num2str(fh) '-alpha-' num2str(alpha) ...
                       '-lambda_c-' num2str(lambda_c) '-chromAtn-' ...
                       num2str(chromAttenuation) '.avi']);

    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    fr = vid.FrameRate;
    len = vid.NumberOfFrames;
    temp = struct('cdata', zeros(vidHeight, vidWidth, nChannels, 'uint8'), 'colormap', []);

    startIndex = 1;
    endIndex = len-10;

    vidOut = VideoWriter(outName);
    vidOut.FrameRate = fr;

    open(vidOut)


    % compute Laplacian pyramid for each frame
    [pyr_stack, pind] = build_Lpyr_stack(vidFile, startIndex, endIndex);

    % save the result for convenience

    % save(['pyrStack_' vidName '.mat'],'pyr_stack','pind','-v7.3');

    filtered_stack = ideal_bandpassing(pyr_stack, 3, fl, fh, samplingRate);


    %% amplify each spatial frequency bands according to Figure 6 of our paper
    ind = size(pyr_stack(:,1,1),1);
    nLevels = size(pind,1);
    
    delta = lambda_c/8/(1+alpha);
    
    % the factor to boost alpha above the bound we have in the
    % paper. (for better visualization)
    exaggeration_factor = 2;
    
    % compute the representative wavelength lambda for the lowest spatial 
    % freqency band of Laplacian pyramid
    
    lambda = (vidHeight^2 + vidWidth^2).^0.5/3; % 3 is experimental constant

    for l = nLevels:-1:1
      indices = ind-prod(pind(l,:))+1:ind;
      % compute modified alpha for this level
      currAlpha = lambda/delta/8 - 1;
      currAlpha = currAlpha*exaggeration_factor;
          
      if (l == nLevels || l == 1) % ignore the highest and lowest frequency band
          filtered_stack(indices,:,:) = 0;
      elseif (currAlpha > alpha)  % representative lambda exceeds lambda_c
          filtered_stack(indices,:,:) = alpha*filtered_stack(indices,:,:);
      else
          filtered_stack(indices,:,:) = currAlpha*filtered_stack(indices,:,:);
      end
      
      ind = ind - prod(pind(l,:));
      % go one level down on pyramid, 
      % representative lambda will reduce by factor of 2
      lambda = lambda/2; 
    end
    
    %% Render on the input video

    % output video
    k = 0;
    for i=startIndex+1:endIndex
        i
        k = k+1;
        temp.cdata = read(vid, i);
        [rgbframe,~] = frame2im(temp);
        rgbframe = im2double(rgbframe);
        frame = rgb2ntsc(rgbframe);

        filtered = zeros(vidHeight,vidWidth,3);

        filtered(:,:,1) = reconLpyr(filtered_stack(:,1,k),pind);
        filtered(:,:,2) = reconLpyr(filtered_stack(:,2,k),pind)*chromAttenuation;
        filtered(:,:,3) = reconLpyr(filtered_stack(:,3,k),pind)*chromAttenuation;

        filtered = filtered+frame;

        frame = ntsc2rgb(filtered);

        frame(frame > 1) = 1;
        frame(frame < 0) = 0;


        writeVideo(vidOut,im2uint8(frame));
    end


    close(vidOut);

end

================
File: vidmag/Linear/amplify_spatial_lpyr_temporal_iir.m
================
% amplify_spatial_lpyr_temporal_iir(vidFile, resultsDir, ...
%                                   alpha, lambda_c, r1, r2, chromAttenuation)
% 
% Spatial Filtering: Laplacian pyramid
% Temporal Filtering: substraction of two IIR lowpass filters
% 
% y1[n] = r1*x[n] + (1-r1)*y1[n-1]
% y2[n] = r2*x[n] + (1-r2)*y2[n-1]
% (r1 > r2)
%
% y[n] = y1[n] - y2[n]
%
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function amplify_spatial_lpyr_temporal_iir(vidFile, resultsDir, ...
            alpha, lambda_c, r1, r2, chromAttenuation)
 
    [~,vidName] = fileparts(vidFile);
    outName = fullfile(resultsDir,[vidName '-iir-r1-' num2str(r1)...
        '-r2-' num2str(r2)...
        '-alpha-' num2str(alpha) ...
        '-lambda_c-' num2str(lambda_c) ...
        '-chromAtn-' num2str(chromAttenuation) '.avi']);

    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    fr = vid.FrameRate;
    len = vid.NumberOfFrames;
    temp = struct('cdata', ...
		  zeros(vidHeight, vidWidth, nChannels, 'uint8'), ...
		  'colormap', []);


    startIndex = 1;
    endIndex = len-10;

    vidOut = VideoWriter(outName);
    vidOut.FrameRate = fr;

    open(vidOut)

    % firstFrame
    temp.cdata = read(vid, startIndex);
    [rgbframe,~] = frame2im(temp);
    rgbframe = im2double(rgbframe);
    frame = rgb2ntsc(rgbframe);

    [pyr,pind] = buildLpyr(frame(:,:,1),'auto');
    pyr = repmat(pyr,[1 3]);
    [pyr(:,2),~] = buildLpyr(frame(:,:,2),'auto');
    [pyr(:,3),~] = buildLpyr(frame(:,:,3),'auto');
    
    lowpass1 = pyr;
    lowpass2 = pyr;

    output = rgbframe;
    writeVideo(vidOut,im2uint8(output));

    nLevels = size(pind,1);

    for i=startIndex+1:endIndex
        
            progmeter(i-startIndex,endIndex - startIndex + 1);
            
            temp.cdata = read(vid, i);
            [rgbframe,~] = frame2im(temp);

            rgbframe = im2double(rgbframe);
            frame = rgb2ntsc(rgbframe);
            
            [pyr(:,1),~] = buildLpyr(frame(:,:,1),'auto');
            [pyr(:,2),~] = buildLpyr(frame(:,:,2),'auto');
            [pyr(:,3),~] = buildLpyr(frame(:,:,3),'auto');
            
            % temporal filtering
            lowpass1 = (1-r1)*lowpass1 + r1*pyr;
            lowpass2 = (1-r2)*lowpass2 + r2*pyr;

            filtered = (lowpass1 - lowpass2);
            
            
            %% amplify each spatial frequency bands according to Figure 6 of our paper
            ind = size(pyr,1);

            delta = lambda_c/8/(1+alpha);
            
            % the factor to boost alpha above the bound we have in the
            % paper. (for better visualization)
            exaggeration_factor = 2;

            % compute the representative wavelength lambda for the lowest spatial 
            % freqency band of Laplacian pyramid

            lambda = (vidHeight^2 + vidWidth^2).^0.5/3; % 3 is experimental constant

            for l = nLevels:-1:1
              indices = ind-prod(pind(l,:))+1:ind;
              % compute modified alpha for this level
              currAlpha = lambda/delta/8 - 1;
              currAlpha = currAlpha*exaggeration_factor;
              
              if (l == nLevels || l == 1) % ignore the highest and lowest frequency band
                  filtered(indices,:) = 0;
              elseif (currAlpha > alpha)  % representative lambda exceeds lambda_c
                  filtered(indices,:) = alpha*filtered(indices,:);
              else
                  filtered(indices,:) = currAlpha*filtered(indices,:);
              end

              ind = ind - prod(pind(l,:));
              % go one level down on pyramid, 
              % representative lambda will reduce by factor of 2
              lambda = lambda/2; 
            end
            
            
            %% Render on the input video
            output = zeros(size(frame));
            
            output(:,:,1) = reconLpyr(filtered(:,1),pind);
            output(:,:,2) = reconLpyr(filtered(:,2),pind);
            output(:,:,3) = reconLpyr(filtered(:,3),pind);

            output(:,:,2) = output(:,:,2)*chromAttenuation; 
            output(:,:,3) = output(:,:,3)*chromAttenuation;

            output = frame + output;
            
            output = ntsc2rgb(output); 
%             filtered = rgbframe + filtered.*mask;
            
            output(output > 1) = 1;
            output(output < 0) = 0;

            writeVideo(vidOut,im2uint8(output));
            
            
                      
    end
    close(vidOut);
end

================
File: vidmag/Linear/blurDnClr.m
================
% 3-color version of blurDn.

function out = blurDnClr(im, nlevs, filt)

%------------------------------------------------------------
%% OPTIONAL ARGS:

if (exist('nlevs') ~= 1) 
  nlevs = 1;
end

if (exist('filt') ~= 1) 
  filt = 'binom5';
end

%------------------------------------------------------------

tmp = blurDn(im(:,:,1), nlevs, filt);
out = zeros(size(tmp,1), size(tmp,2), size(im,3));
out(:,:,1) = tmp;
for clr = 2:size(im,3)
  out(:,:,clr) = blurDn(im(:,:,clr), nlevs, filt);
end

================
File: vidmag/Linear/blurUpClr.m
================
% 3-color version of upBlur

function out = blurUpClr(im, nlevs, filt)

%------------------------------------------------------------
%% OPTIONAL ARGS:

if (exist('nlevs') ~= 1) 
  nlevs = 1;
end

if (exist('filt') ~= 1) 
  filt = 'binom5';
end

%------------------------------------------------------------

tmp = upBlur(im(:,:,1), nlevs, filt);
out = zeros(size(tmp,1), size(tmp,2), size(im,3));
out(:,:,1) = tmp;
for clr = 2:size(im,3)
  out(:,:,clr) = upBlur(im(:,:,clr), nlevs, filt);
end

================
File: vidmag/Linear/build_GDown_stack.m
================
% GDOWN_STACK = build_GDown_stack(VID_FILE, START_INDEX, END_INDEX, LEVEL)
% 
% Apply Gaussian pyramid decomposition on VID_FILE from START_INDEX to
% END_INDEX and select a specific band indicated by LEVEL
% 
% GDOWN_STACK: stack of one band of Gaussian pyramid of each frame 
% the first dimension is the time axis
% the second dimension is the y axis of the video
% the third dimension is the x axis of the video
% the forth dimension is the color channel
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function GDown_stack = build_GDown_stack(vidFile, startIndex, endIndex, level)

    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    temp = struct('cdata', zeros(vidHeight, vidWidth, nChannels, 'uint8'), 'colormap', []);

    % firstFrame
    temp.cdata = read(vid, startIndex);
    [rgbframe, ~] = frame2im(temp);
    rgbframe = im2double(rgbframe);
    frame = rgb2ntsc(rgbframe);

    blurred = blurDnClr(frame,level);

    % create pyr stack
    GDown_stack = zeros(endIndex - startIndex +1, size(blurred,1),size(blurred,2),size(blurred,3));
    GDown_stack(1,:,:,:) = blurred;

    k = 1;
    for i=startIndex+1:endIndex
            k = k+1;
            temp.cdata = read(vid, i);
            [rgbframe,~] = frame2im(temp);

            rgbframe = im2double(rgbframe);
            frame = rgb2ntsc(rgbframe);

            blurred = blurDnClr(frame,level);
            GDown_stack(k,:,:,:) = blurred;

    end
    
end

================
File: vidmag/Linear/build_Lpyr_stack.m
================
% [LPYR_STACK, pind] = build_Lpyr_stack(VID_FILE, START_INDEX, END_INDEX)
% 
% Apply Laplacian pyramid decomposition on vidFile from startIndex to
% endIndex
% 
% LPYR_STACK: stack of Laplacian pyramid of each frame 
% the second dimension is the color channel
% the third dimension is the time
%
% pind: see buildLpyr function in matlabPyrTools library
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function [Lpyr_stack, pind] = build_Lpyr_stack(vidFile, startIndex, endIndex)

    % Read video
    vid = VideoReader(vidFile);
    % Extract video info
    vidHeight = vid.Height;
    vidWidth = vid.Width;
    nChannels = 3;
    temp = struct('cdata', zeros(vidHeight, vidWidth, nChannels, 'uint8'), 'colormap', []);


    % firstFrame
    temp.cdata = read(vid, startIndex);
    [rgbframe,~] = frame2im(temp);
    rgbframe = im2double(rgbframe);
    frame = rgb2ntsc(rgbframe);

    [pyr,pind] = buildLpyr(frame(:,:,1),'auto');

    % pre-allocate pyr stack
    Lpyr_stack = zeros(size(pyr,1),3,endIndex - startIndex +1);
    Lpyr_stack(:,1,1) = pyr;

    [Lpyr_stack(:,2,1), ~] = buildLpyr(frame(:,:,2),'auto');
    [Lpyr_stack(:,3,1), ~] = buildLpyr(frame(:,:,3),'auto');

    k = 1;
    for i=startIndex+1:endIndex
            k = k+1;
            temp.cdata = read(vid, i);
            [rgbframe,~] = frame2im(temp);

            rgbframe = im2double(rgbframe);
            frame = rgb2ntsc(rgbframe);

            [Lpyr_stack(:,1,k),~] = buildLpyr(frame(:,:,1),'auto');
            [Lpyr_stack(:,2,k),~] = buildLpyr(frame(:,:,2),'auto');
            [Lpyr_stack(:,3,k),~] = buildLpyr(frame(:,:,3),'auto');
    end
end

================
File: vidmag/Linear/ideal_bandpassing.m
================
% FILTERED = ideal_bandpassing(INPUT,DIM,WL,WH,SAMPLINGRATE)
% 
% Apply ideal band pass filter on INPUT along dimension DIM.
% 
% WL: lower cutoff frequency of ideal band pass filter
% WH: higher cutoff frequency of ideal band pass filter
% SAMPLINGRATE: sampling rate of INPUT
% 
% Copyright (c) 2011-2012 Massachusetts Institute of Technology, 
% Quanta Research Cambridge, Inc.
%
% Authors: Hao-yu Wu, Michael Rubinstein, Eugene Shih, 
% License: Please refer to the LICENCE file
% Date: June 2012
%
function filtered = ideal_bandpassing(input, dim, wl, wh, samplingRate)

    if (dim > size(size(input),2))
        error('Exceed maximum dimension');
    end

    input_shifted = shiftdim(input,dim-1);
    Dimensions = size(input_shifted);
    
    n = Dimensions(1);
    dn = size(Dimensions,2);
    
    
    Freq = 1:n;
    Freq = (Freq-1)/n*samplingRate;
    mask = Freq > wl & Freq < wh;
    
    Dimensions(1) = 1;
    mask = mask(:);
    mask = repmat(mask, Dimensions);

    
    F = fft(input_shifted,[],1);
    
    F(~mask) = 0;
    
    filtered = real(ifft(F,[],1));
    
    filtered = shiftdim(filtered,dn-(dim-1));
    
end

================
File: vidmag/PhaseBased/motionAttenuateFixedPhase.m
================
function motionAttenuateFixedPhase(inFile, outFile, varargin)



%--------------------------------------------------------------------------
% Parameters

p = inputParser;

% Temporal window size
addOptional(p, 'WinSize', 11);

parse(p,  varargin{:});
win = p.Results.WinSize;

%--------------------------------------------------------------------------
vr = VideoReader(inFile);
frame1 = vr.read(1);
[height, width, nChannels] = size(frame1);
nFrames = vr.NumberOfFrames;
vid = vr.read();


%--------------------------------------------------------------------------
% Pyramid functions
[h,w,nC,nF] = size(vid);
[buildPyr, reconPyr] = octave4PyrFunctions(h,w);

[~, pind] = buildPyr(frame1(:,:,1));
nElements = dot(pind(:,1),pind(:,2));

outVid = VideoWriter(outFile, 'MPEG-4');
outVid.FrameRate = vr.FrameRate;
outVid.Quality = 90;
outVid.open;

frame1 = rgb2ntsc(im2double(frame1));
referencePyr = zeros(nElements, 3);
for c = 1:nChannels
    referencePyr(:,c) = buildPyr(frame1(:,:,c));
end
fixedPhase = angle(referencePyr);

for i=1:nFrames
    fprintf('Processing frame %d of %d\n', i, nFrames);
          
    % Read frames and transform
    frame = im2double(vid(:,:,:,i));
    frame = rgb2ntsc(frame);
    pyr = zeros(nElements, nChannels);
    for c = 1:nChannels
        pyr(:,c) = buildPyr(frame(:,:,c));
    end
    
    % Set all phases to the model and reconstrct
    
    amp = abs(pyr);
    phase = fixedPhase;
    
    outFrame = zeros(height, width, nChannels);
    for c = 1:nChannels
        outFrame(:,:,c) = reconPyr(exp(1i*phase(:,c)) .* amp(:,c), pind);
    end
        
    % Back to RGB
    outFrame = ntsc2rgb(outFrame);

    outVid.writeVideo(im2uint8(outFrame));
end
outVid.close();

================
File: vidmag/PhaseBased/motionAttenuateLowpassPhase.m
================
function motionAttenuateLowpassPhase(inFile, outFile, loCutoff)
% Processing done on RGB instead of YIQ space



%--------------------------------------------------------------------------
vr = VideoReader(inFile);
frame1 = vr.read(1);
[height, width, nChannels] = size(frame1);
nFrames = vr.NumberOfFrames;
vid = vr.read();

%--------------------------------------------------------------------------
% Pyramid functions
[h,w,nC,nF] = size(vid);
[buildPyr, reconPyr] = octave4PyrFunctions(h,w);

[~, pind] = buildPyr(frame1(:,:,1));
nElements = dot(pind(:,1),pind(:,2));

outVid = VideoWriter(outFile, 'MPEG-4');
outVid.FrameRate = vr.FrameRate;
outVid.Quality = 90;
outVid.open;
outVid.writeVideo(frame1);
frame1 = (im2double(frame1));

[B, A] = butter(1,loCutoff, 'low');

prevPhase = zeros(nElements, nChannels);
for c = 1:nChannels
   [prevPhase(:,c), pind] = buildPyr(frame1);
end
prevPhase = prevPhase./abs(prevPhase); %Filter real and imag parts of phase

prevOutPhase = prevPhase;

for i=2:nFrames
    fprintf('Processing frame %d of %d\n', i, nFrames);
          
    % Read frames and transform
    frame = im2double(vid(:,:,:,i));   
    pyr = zeros(nElements, nChannels);
    for c = 1:nChannels
        pyr(:,c) = buildPyr(frame(:,:,c));
    end
    curPhase = pyr./abs(pyr);
    curOut = (B(1)*curPhase + B(2)*prevPhase-A(2)*prevOutPhase)./A(1);
    
    idx = pyrBandIndices(pind, 26); % set lowpass phase to 1
    curOut(idx,:) = 1;
    
    prevPhase = curPhase;
    prevOutPhase = curOut;
    
    
    amp = abs(pyr);
    amp(idx,:) = pyr(idx,:); % Don't process lowpass residual
    idx = pyrBandIndices(pind,1);
    amp(idx,:) = 0; % Don't include hipass residual
    
    outFrame = zeros(height, width, nChannels);
    for c = 1:nChannels
        outFrame(:,:,c) = reconPyr(curOut(:,c) .* amp(:,c), pind);
    end
        
    % Back to RGB
    outFrame = (outFrame);

    outVid.writeVideo(im2uint8(outFrame));
end
outVid.close();

================
File: vidmag/PhaseBased/motionAttenuateMedianPhase.m
================
function motionAttenuateMedianPhase(inFile, outFile, varargin)



%--------------------------------------------------------------------------
% Parameters

p = inputParser;

% Temporal window size
addOptional(p, 'WinSize', 11);

parse(p,  varargin{:});
win = p.Results.WinSize;



%--------------------------------------------------------------------------
vr = VideoReader(inFile);
frame1 = vr.read(1);
[height, width, nChannels] = size(frame1);
nFrames = vr.NumberOfFrames;
vid = vr.read();

%--------------------------------------------------------------------------
% Pyramid functions
[h,w,nC,nF] = size(vid);
[buildPyr, reconPyr] = octave4PyrFunctions(h,w);



nLevels = maxSCFpyrHt(frame1(:,:,1));
nOrients = 4;
filt = nOrients-1;
twidth = 1;

[~, pind] = buildPyr(frame1(:,:,1));
nElements = dot(pind(:,1),pind(:,2));

outVid = VideoWriter(outFile, 'MPEG-4');
outVid.Quality = 90;
outVid.open;

for i=1:nFrames
    fprintf('Processing frame %d of %d\n', i, nFrames);
    
    t0 = max(i-fix(win/2), 1); t1 = min(t0+win-1, nFrames);
    ts = t0:t1;
      
    % Read frames and transform
    frames = zeros(height, width, nChannels, length(ts));
    pyrs = zeros(nElements, length(ts));
    for j = 1:length(ts)
        frame = im2double(vid(:,:,:,ts(j)));
        
        % Convert to YIQ
        frame = rgb2ntsc(frame);
        
        frames(:,:,:,j) = frame;
        
        % Transform
        pyrs(:,j) = buildPyr(frame(:,:,1));
    end
   
    % Phase model
    meanPhase = median(angle(pyrs), 2);
    
    % Set all phases to the model and reconstrct
    pyr = pyrs(:,ts == i);
    amp = abs(pyr);
    phase = angle(pyr);
    for k = 1:size(pind,1)
        idx = pyrBandIndices(pind, k);
        phase(idx) = meanPhase(idx);
    end        
        
    % Reconstruct
    outFrame = frames(:,:,:,ts == i);
    outFrame(:,:,1) = reconPyr(exp(1i*phase) .* amp, pind);
        
    % Back to RGB
    outFrame = ntsc2rgb(outFrame);

    outVid.writeVideo(outFrame);
end

================
File: vidmag/PhaseBased/phaseAmplify.m
================
% PHASEAMPLIFY(VIDFILE, MAGPHASE, FL, FH, FS, OUTDIR, VARARGIN) 
% 
% Takes input VIDFILE and motion magnifies the motions that are within a
% passband of FL to FH Hz by MAGPHASE times. FS is the videos sampling rate
% and OUTDIR is the output directory. 
%
% Optional arguments:
% attenuateOtherFrequencies (false)
%   - Whether to attenuate frequencies in the stopband  
% pyrType                   ('halfOctave')
%   - Spatial representation to use (see paper)
% sigma                     (0)            
%   - Amount of spatial smoothing (in px) to apply to phases 
% temporalFilter            (FIRWindowBP) 
%   - What temporal filter to use
% 

function outName = phaseAmplify(vidFile, magPhase , fl, fh,fs, outDir, varargin)

    %% Read Video
    vr = VideoReader(vidFile);
    [~, writeTag, ~] = fileparts(vidFile);
    FrameRate = vr.FrameRate;    
    vid = vr.read();
    [h, w, nC, nF] = size(vid);
    
    %% Parse Input
    p = inputParser();

    defaultAttenuateOtherFrequencies = false; %If true, use reference frame phases
    pyrTypes = {'octave', 'halfOctave', 'smoothHalfOctave', 'quarterOctave'}; 
    checkPyrType = @(x) find(ismember(x, pyrTypes));
    defaultPyrType = 'octave';
    defaultSigma = 0;
    defaultTemporalFilter = @FIRWindowBP;
    defaultScale = 1;
    defaultFrames = [1, nF];
    
    addOptional(p, 'attenuateOtherFreq', defaultAttenuateOtherFrequencies, @islogical);
    addOptional(p, 'pyrType', defaultPyrType, checkPyrType);
    addOptional(p,'sigma', defaultSigma, @isnumeric);   
    addOptional(p, 'temporalFilter', defaultTemporalFilter);
    addOptional(p, 'scaleVideo', defaultScale);
    addOptional(p, 'useFrames', defaultFrames);
    
    parse(p, varargin{:});

    refFrame = 1;
    attenuateOtherFreq = p.Results.attenuateOtherFreq;
    pyrType            = p.Results.pyrType;
    sigma              = p.Results.sigma;
    temporalFilter     = p.Results.temporalFilter;
    scaleVideo         = p.Results.scaleVideo;
    frames             = p.Results.useFrames;

    %% Compute spatial filters        
    vid = vid(:,:,:,frames(1):frames(2));
    [h, w, nC, nF] = size(vid);
    if (scaleVideo~= 1)
        [h,w] = size(imresize(vid(:,:,1,1), scaleVideo));
    end
    
    
    fprintf('Computing spatial filters\n');
    ht = maxSCFpyrHt(zeros(h,w));
    switch pyrType
        case 'octave'
            filters = getFilters([h w], 2.^[0:-1:-ht], 4);
            repString = 'octave';
            fprintf('Using octave bandwidth pyramid\n');        
        case 'halfOctave'            
            filters = getFilters([h w], 2.^[0:-0.5:-ht], 8,'twidth', 0.75);
            repString = 'halfOctave';
            fprintf('Using half octave bandwidth pyramid\n'); 
        case 'smoothHalfOctave'
            filters = getFiltersSmoothWindow([h w], 8, 'filtersPerOctave', 2);           
            repString = 'smoothHalfOctave';
            fprintf('Using half octave pyramid with smooth window.\n');
        case 'quarterOctave'
            filters = getFiltersSmoothWindow([h w], 8, 'filtersPerOctave', 4);
            repString = 'quarterOctave';
            fprintf('Using quarter octave pyramid.\n');
        otherwise 
            error('Invalid Filter Types');
    end

    [croppedFilters, filtIDX] = getFilterIDX(filters);
    
    %% Initialization of motion magnified luma component
    magnifiedLumaFFT = zeros(h,w,nF,'single');
    
    buildLevel = @(im_dft, k) ifft2(ifftshift(croppedFilters{k}.* ...
        im_dft(filtIDX{k,1}, filtIDX{k,2})));
    
    reconLevel = @(im_dft, k) 2*(croppedFilters{k}.*fftshift(fft2(im_dft)));


    %% First compute phase differences from reference frame
    numLevels = numel(filters);        
    fprintf('Moving video to Fourier domain\n');
    vidFFT = zeros(h,w,nF,'single');
    for k = 1:nF
        originalFrame = rgb2ntsc(im2single(vid(:,:,:,k)));
        tVid = imresize(originalFrame(:,:,1), [h w]);
        vidFFT(:,:,k) = single(fftshift(fft2(tVid)));
    end
    clear vid;

    for level = 2:numLevels-1
        %% Compute phases of level
        % We assume that the video is mostly static
        pyrRef = buildLevel(vidFFT(:,:,refFrame), level);        
        pyrRefPhaseOrig = pyrRef./abs(pyrRef);
        pyrRef = angle(pyrRef);        

        delta = zeros(size(pyrRef,1), size(pyrRef,2) ,nF,'single');
        fprintf('Processing level %d of %d\n', level, numLevels);
           
        
        for frameIDX = 1:nF
            filterResponse = buildLevel(vidFFT(:,:,frameIDX), level);
            pyrCurrent = angle(filterResponse);
            delta(:,:,frameIDX) = single(mod(pi+pyrCurrent-pyrRef,2*pi)-pi);                          
        end
        
        
        %% Temporal Filtering
        fprintf('Bandpassing phases\n');
        delta = temporalFilter(delta, fl/fs,fh/fs); 


        %% Apply magnification

        fprintf('Applying magnification\n');
        for frameIDX = 1:nF

            phaseOfFrame = delta(:,:,frameIDX);
            originalLevel = buildLevel(vidFFT(:,:,frameIDX),level);
            %% Amplitude Weighted Blur        
            if (sigma~= 0)
                phaseOfFrame = AmplitudeWeightedBlur(phaseOfFrame, abs(originalLevel)+eps, sigma);        
            end

            % Increase phase variation
            phaseOfFrame = magPhase *phaseOfFrame;  
            
            if (attenuateOtherFreq)
                tempOrig = abs(originalLevel).*pyrRefPhaseOrig;
            else
                tempOrig = originalLevel;
            end
            tempTransformOut = exp(1i*phaseOfFrame).*tempOrig; 

            curLevelFrame = reconLevel(tempTransformOut, level);
            magnifiedLumaFFT(filtIDX{level,1}, filtIDX{level,2},frameIDX) = curLevelFrame + magnifiedLumaFFT(filtIDX{level,1}, filtIDX{level,2},frameIDX);
        end



    end
    %% Add unmolested lowpass residual
    level = numel(filters);
    for frameIDX = 1:nF 
        lowpassFrame = vidFFT(filtIDX{level,1},filtIDX{level,2},frameIDX).*croppedFilters{end}.^2;
        magnifiedLumaFFT(filtIDX{level,1},filtIDX{level,2},frameIDX) = magnifiedLumaFFT(filtIDX{level,1},filtIDX{level,2},frameIDX) + lowpassFrame;    
    end
    clear vidFFT;
    vr = VideoReader(vidFile);
    vid = vr.read([frames]);
    res = zeros(h,w,nC,nF,'uint8');
    for k = 1:nF
        magnifiedLuma = real(ifft2(ifftshift(magnifiedLumaFFT(:,:,k))));
        outFrame(:,:,1) = magnifiedLuma;
        originalFrame = rgb2ntsc(im2single(vid(:,:,:,k)));    
        originalFrame = imresize(originalFrame, [h, w]);
        outFrame(:,:,2:3) = originalFrame(:,:,2:3);
        outFrame = ntsc2rgb(outFrame);        
        %% Put frame in output
        res(:,:,:,k) = im2uint8(outFrame);
    end

    outName = sprintf('%s-%s-band%0.2f-%0.2f-sr%d-alpha%d-mp%d-sigma%d-scale%0.2f-frames%d-%d-%s.mp4', writeTag, func2str(temporalFilter), fl, fh,fs, magPhase, attenuateOtherFreq, sigma, scaleVideo, frames(1), frames(2), repString);
    writeVideo(res, FrameRate, fullfile(outDir, outName));   
end

================
File: vidmag/PhaseBased/phaseAmplifyLargeMotions.m
================
%% Script to process stomp video without processing large motions and without using all the memory
%
% Neal Wadhwa, April 2013


vidFile = inFile;
vidName = 'stomp';
outDir = resultsDir;
sigma = 12; % Blurring
alpha = 50; % Magnification
FS = 300; % Sampling rate
fl = 1; % Freq bands
fh = 25; % Freq bands

vr   = VideoReader(vidFile);




vid = vr.read();
[h,w,nC,nF] = size(vid);
toD = @(k) rgb2y(im2single(vid(:,:,:,k))); % Get luma component of a frame
getChroma = @(k) rgb2ntsc(im2single((vid(:,:,:,k))));

clear phases
clear amps

filters = getFilters([h w], 2.^[0:-1:-3], 4);
[croppedFilters, filtIDX] = getFilterIDX(filters);
buildPyr = @(im) buildSCFpyrGen(im, croppedFilters, filtIDX) ;
reconPyr = @(pyr, pind) reconSCFpyrGen(pyr, pind, croppedFilters, filtIDX);
refFrame  = 200;

tag = sprintf('alpha%d-sigma%d-band%d-%d-refFrame%d', alpha, sigma, fl, fh, refFrame);
mkdir(fullfile(outDir, tag));
vw_withLarge = VideoWriter(fullfile(outDir, sprintf('%s-%s-withlarge.avi',vidName, tag)));
vw_withLarge.Quality = 90;
vw_withLarge.FrameRate = 30;
vw_withLarge.open();
vw_withLarge.writeVideo(vid(:,:,:,1:2));


vw_withoutLarge = VideoWriter(fullfile(outDir, sprintf('%s-%s-withoutlarge.avi',vidName, tag)));
vw_withoutLarge.Quality = 90;
vw_withoutLarge.FrameRate = 30;
vw_withoutLarge.open(); 
vw_withoutLarge.writeVideo(vid(:,:,:,1:2));

[B, A] = butter(1,[fl/FS*2, fh/FS*2]); % Temporal Filter


refPyr = buildPyr(toD(refFrame));
pyr = buildPyr(toD(1));
phaseM2 = angle(pyr./refPyr);
[pyr, pind] = buildPyr(toD(2));
phaseM1 = angle(pyr./refPyr);

% Initialize butterworth filter
outPhaseM2 = phaseM2;
outPhaseM1 = phaseM1;
outPhaseM3 = phaseM1;
outPhaseM4 = phaseM1;

% Amplification
for k = 3:nF    
    fprintf('Processing frame %d\n', k);
    curPyr = buildPyr(toD(k));
    curPhase = angle(curPyr./refPyr);
    % Butterworth filter temporally
    outPhase = (B(1)*curPhase + B(2)*phaseM1 + B(3)*phaseM2 - A(2)*outPhaseM1 - A(3)*outPhaseM2)/A(1);
    phaseM2 = phaseM1;
    phaseM1 = curPhase;
    outPhaseM5 = outPhaseM4;
    outPhaseM4 = outPhaseM3;
    outPhaseM3 = outPhaseM2;
    outPhaseM2 = outPhaseM1;
    outPhaseM1 = outPhase;
    
    % Spatial Blurring    
    for band = 2:size(pind,1);
        idx = pyrBandIndices(pind,band);
        temp = pyrBand(outPhase,pind, band);
        curAmp = pyrBand(abs(curPyr), pind, band);
        temp = AmplitudeWeightedBlur(temp, curAmp, sigma);
        outPhase(idx) = temp(:);        
    end
    % Reconstruction with processing large motions
    outPhase = outPhase*(alpha);
    luma = (reconPyr(curPyr.*exp(1i*outPhase),pind));
    frame = getChroma(k);
    frame(:,:,1) = luma;
    vw_withLarge.writeVideo(im2uint8(ntsc2rgb(frame)));
    
    % Reconstruction without processing large motions
    
    % Spatiotemporally smooth phases to increase robustness
    phaseVar = (abs(outPhase)+abs(outPhaseM2)+abs(outPhaseM3)+abs(outPhaseM4)+abs(outPhaseM5))/5;
  
    for band = 2:size(pind,1);
        idx = pyrBandIndices(pind, band);
         temp = pyrBand(phaseVar,pind, band);
         curAmp = pyrBand(abs(curPyr), pind, band);
         temp = AmplitudeWeightedBlur(temp, curAmp, sigma);
         phaseVar(idx) = temp(:);
    end
             
    cutoff = pi; 
    for band = 1:3
       for or = 1:4
            idx = pyrBandIndices(pind, 1+or + 4*(band-1));
            temp = outPhase(idx);
            temp(phaseVar(idx)>cutoff/2.^band) = 0;
            outPhase(idx) = temp;
           
        end
    end
        
    luma = (reconPyr(curPyr.*exp(1i*outPhase),pind));
    frame = getChroma(k);
    frame(:,:,1) = luma;    
    vw_withoutLarge.writeVideo(im2uint8(ntsc2rgb(frame)));
    
end


vw_withLarge.close();
vw_withoutLarge.close();

================
File: vidmag/PhaseBased/phaseAmplifySimple.m
================
function phaseAmplifySimple(vidFile, alpha, fl, fh, outFile, varargin)
% Eulerian motion magnification using phase manipulation in complex 
% steerable pyramids.
% This is a simple implementation we provide for refernce. It is slower and
% takes more memory, but is easier to read. It should only be used with
% small and short videos.
%
% Input:
%   vidFile - Path to video file
%   alpha - Magnification factor
%   fl - Low frequency cutoff
%   fh - High frequency cutoff
%   outFile - File name to write the result into
% 
% Requires Simoncelli's buildSCFpyr function for the complex steerable 
% pyramid transform, and reconSCFpyr to reconstruct from it.
%
% Design decisions:
%   - Amplify w.r.t some reference frame (typically the first) to make the
%     phases smaller. Otherwise discontinuities may occur when filtering phases
%     near the boundaries -pi, pi
%   - Typically processing the luminance channel only
%   - Not processing the high- and low-pass residuals. Those will just be
%     added back without modification during reconstruction
%   - Instead of filtering the complex phase e^(iw(x+delta(t))), we filter
%     on w(x+delta(t))
% 


% Load the sequence
fprintf('Reading sequence\n');
vr = VideoReader(vidFile);
seq = im2double(vr.read);
[height, width, numChannels, numFrames] = size(seq);
fprintf('Width = %d, Height = %d, Channels = %d, Frames = %d\n', height, width, numChannels, numFrames);


%--------------------------------------------------------------------------
% Parameters

p = inputParser;

% Number of pyramid levels
addOptional(p, 'numLevels', maxSCFpyrHt(seq(:,:,1,1)));
% Number of orientation (up to 16 due to Simoncelli's code)
addOptional(p, 'numOrients', 4);
% Chromatic attenuation
addOptional(p, 'chromAtten', 0);
% The frame with respect to which the differences in phases are taken
addOptional(p, 'refFrame', 1);

parse(p,  varargin{:});
numLevels = p.Results.numLevels;
numOrients = p.Results.numOrients;
chromAtten = p.Results.chromAtten;
refFrame = p.Results.refFrame;

% Don't amplify high and low residulals. Use given Alpha for all other
% subbands
magPhase = [0 repmat(alpha, [1, numLevels]) 0]'; 

% Parameter in Simoncelli's code, default to 1
twidth = 1; 


%--------------------------------------------------------------------------

% Convert to YIQ
% TODO: deal correctly with single channel videos
for ii = 1:numFrames
    seq(:,:,:,ii) = rgb2ntsc(seq(:,:,:,ii));
end

if chromAtten == 0
    isProcChannel = logical([1,0,0]);
else
    isProcChannel = logical([1,1,1]);
end

filt = numOrients-1;
[~, pind] = buildSCFpyr(seq(:,:,1,1), numLevels, filt);
numScales = (size(pind,1)-2)/numOrients + 2;
numBands = size(pind,1);
numElements = dot(pind(:,1),pind(:,2));

% Scale up magnification levels
if (size(magPhase,1) == 1)
    magPhase = repmat(magPhase,[numBands 1]);
elseif (size(magPhase,1) == numScales)
   magPhase = scaleBand2all(magPhase, numScales, numOrients); 
end


%--------------------------------------------------------------------------
% The temporal signal is the phase changes of each frame from the reference
% frame. We compute this on the fly instead of storing the transform for
% all the frames (this means we will recompute the transform again later 
% for the magnification)

fprintf('Computing phase differences\n');

deltaPhase = zeros(numElements, numFrames, numChannels);
parfor ii = 1:numFrames
    
    tmp = zeros(numElements, numChannels);
    
    for c = find(isProcChannel)
        
        % Transform the reference frame
        pyrRef = buildSCFpyr(seq(:,:,c,refFrame), numLevels, filt, twidth);
        
        % Transform the current frame
        pyrCA = buildSCFpyr(seq(:,:,c,ii), numLevels, filt, twidth);
        
        tmp(:,c) = angle(pyrCA) - angle(pyrRef);
    end
    
    deltaPhase(:,ii,:) = tmp;
end


%--------------------------------------------------------------------------
% Bandpass the phases

fprintf('Bandpassing phases\n');

deltaPhase = single(deltaPhase);
freqDom = fft(deltaPhase, [], 2);

first = ceil(fl*numFrames);
second = floor(fh*numFrames);
freqDom(:,1:first) = 0;
freqDom(:,second+1:end) = 0;
deltaPhase = real(ifft(freqDom,[],2));


%--------------------------------------------------------------------------
% Magnify

fprintf('Magnifying\n');

vw = VideoWriter(outFile, 'Motion JPEG AVI');
vw.Quality = 90;
vw.FrameRate = vr.FrameRate;
vw.open;

for ii = 1:numFrames
    ii
    
    frame = seq(:,:,:,ii);
    
    for c = find(isProcChannel)
        
        % Amplify the phase changes
        phase1 = deltaPhase(:,ii,c);
        for k = 1:size(pind,1)
            idx = pyrBandIndices(pind,k);
            phase1(idx) = phase1(idx) * magPhase(k);
        end
        
        % Attenuate the amplification in the chroma channels
        if c > 1
            phase1 = phase1 * chromAtten;
        end
        
        % Transform
        pyrCA = buildSCFpyr(seq(:,:,c,ii), numLevels, filt, twidth);
    
        % Magnify and reconstruct
        frame(:,:,c) = reconSCFpyr(exp(1i*phase1) .* pyrCA, pind,'all', 'all', twidth);
    end
    
    % Back to RGB
    frame = ntsc2rgb(frame); 
    
    writeVideo(vw, im2uint8(frame));
end

vw.close;

================
File: vidmag/.git/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: vidmag/.git/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: vidmag/.git/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: vidmag/.git/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: vidmag/.git/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: vidmag/.git/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: vidmag/.git/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: vidmag/.git/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: vidmag/.git/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: vidmag/.git/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: vidmag/.git/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: vidmag/.git/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: vidmag/.git/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: vidmag/.git/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: vidmag/.git/logs/HEAD
================
0000000000000000000000000000000000000000 5e590cfd3b87035dc1071802117579b6c7d39f1a Marek Zieliński <marku@DESKTOP-8HNEG0D.(none)> 1715532130 +0200	clone: from https://github.com/rgov/vidmag

================
File: vidmag/.git/refs/heads/master
================
5e590cfd3b87035dc1071802117579b6c7d39f1a

================
File: vidmag/.git/logs/refs/heads/master
================
0000000000000000000000000000000000000000 5e590cfd3b87035dc1071802117579b6c7d39f1a Marek Zieliński <marku@DESKTOP-8HNEG0D.(none)> 1715532130 +0200	clone: from https://github.com/rgov/vidmag

================
File: vidmag/.git/refs/remotes/origin/HEAD
================
ref: refs/remotes/origin/master

================
File: vidmag/.git/logs/refs/remotes/origin/HEAD
================
0000000000000000000000000000000000000000 5e590cfd3b87035dc1071802117579b6c7d39f1a Marek Zieliński <marku@DESKTOP-8HNEG0D.(none)> 1715532130 +0200	clone: from https://github.com/rgov/vidmag
